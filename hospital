-- Q1.hs â€” Hospital Patient Records Analysis (Online Compiler Safe)

module Main where
import System.IO (isEOF)

type Rec = (String, Int, Int)

-- Split string on a character
split :: Char -> String -> [String]
split _ [] = [""]
split c (x:xs)
  | x == c    = "" : rest
  | otherwise = (x : head rest) : tail rest
  where
    rest = split c xs

parseRec :: String -> Rec
parseRec s =
  case split ':' s of
    [nm,a,r] -> (nm, read a, read r)
    _        -> error "Bad line. Use Name:Age:Reason"

countReasons :: [Rec] -> (Int, Int, Int)
countReasons [] = (0,0,0)
countReasons ((_,_,rc):xs)
  | rc == 1   = let (a,b,c) = countReasons xs in (a+1,b,c)
  | rc == 2   = let (a,b,c) = countReasons xs in (a,b+1,c)
  | rc == 3   = let (a,b,c) = countReasons xs in (a,b,c+1)
  | otherwise = countReasons xs

countAdults :: [Rec] -> Int
countAdults [] = 0
countAdults ((_,age,_):xs)
  | age >= 18 = 1 + countAdults xs
  | otherwise = countAdults xs

-- Read until EOF safely
getLines :: IO [String]
getLines = do
  eof <- isEOF
  if eof
    then return []
    else do ln <- getLine
            rest <- getLines
            return (ln : rest)

sample :: [Rec]
sample =
  [("Alice",25,1),("Bob",42,2),("Carol",35,3),("David",18,1),("Eve",50,2)]

main :: IO ()
main = do
  ls <- getLines
  let recs = if null ls then sample else map parseRec ls
      (c1,c2,c3) = countReasons recs
      adults     = countAdults recs
  putStrLn ("General Checkup (1): " ++ show c1)
  putStrLn ("Emergency (2): "       ++ show c2)
  putStrLn ("Surgery (3): "         ++ show c3)
  putStrLn ("Total adults (>=18): " ++ show adults)
